cxf.path=/soap

# https://www.aurigait.com/blog/how-to-implement-2-way-ssl-using-spring-boot/
# keytool -genkeypair -alias server-app -keyalg RSA -keysize 2048 -storetype JKS -keystore server-app.jks -validity 3650
# keytool -genkeypair -alias client-app -keyalg RSA -keysize 2048 -storetype JKS -keystore client-app.jks -validity 3650
# keytool -export -alias client-app -file client-app.crt -keystore client-app.jks
# keytool -import -alias server-app -file server-app.crt -keystore client-app.jks
# keytool -import -alias client-app -file client-app.crt -keystore server-app.jks
# keytool -list -keystore server-app.jks -storepass changeit
# keytool -list -keystore client-app.jks -storepass changeit

# This requires the client to properly authenticate. Removing it would allow anyone to communicate using HTTPS.
server.port=8043
server.ssl.enabled=true
server.ssl.client-auth=need

# This section configures the certificate for the server. It is the certificate that will be presented to the client in the SSL handshake.
# keytool -list -keystore certificate.jks -storepass changeit
server.ssl.key-store=classpath:server-app.jks
server.ssl.key-store-password=changeit
server.ssl.key-alias=server-app
server.ssl.key-store-type=JKS
server.ssl.key-store-provider=SUN

# This section configures the client certificates that we want to trust.
# keytool -list -keystore server-app.jks -storepass changeit
server.ssl.trust-store=classpath:server-app.jks
server.ssl.trust-store-password=changeit
server.ssl.trust-store-type=JKS