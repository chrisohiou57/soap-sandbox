camel.springboot.main-run-controller=true

logging.pattern.console=%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(%5p) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m traceId=%X{trace_id} spanId=%X{span_id} %n%wEx

management.endpoints.web.exposure.include=info, health, prometheus, hawtio, jolokia
hawtio.authenticationEnabled=false

# Metrics metadata
management.metrics.tags.application=camel-account-api

# This allows us to avoid putting creds in here. Instead, we can now use K8s secret and environment variables.
camel.component.aws2-sqs.use-default-credentials-provider=true
camel.component.aws2-s3.use-default-credentials-provider=true

# Test AmazonMQ AMQP Connection Details on Startup
camel.component.amqp.test-connection-on-startup=true

# Queue name for Artemis, SQS, and AmazonMQ account creation messages
jms.queue.account.creation=accountCreation

# I believe this config will allow us to handle a single fragment with the JaxbDataFromat bean defined in JaxbConfig.
# I believe the setHeader() EIP can be used to handle multiple fragments if we're not so specific here (e.g. part-class removed).
# See additional comments inn the 'publish-acct-creation-artemis' route for using setHeader() to control the config for this.
# I believe multiple JaxbDataFormat beans can be defined and injected as needed as well.
camel.dataformat.jaxb.context-path=com.chrias.camelsoapmodel.account
camel.dataformat.jaxb.fragment=true
camel.dataformat.jaxb.part-namespace=http://www.chrias.com/account
camel.dataformat.jaxb.part-class=com.chrias.camelsoapmodel.account.Account
