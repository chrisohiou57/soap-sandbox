---
apiVersion: v1
kind: ConfigMap
metadata:
  name: collector-config
data:
  collector.yaml: |
    receivers:
      otlp:
        protocols: 
          grpc:
      filelog:
        include:
          - /var/log/pods/*.log
        exclude:
          # Exclude logs from all containers named otel-collector
          - /var/log/pods/*/otel-collector/*.log
        start_at: beginning
        include_file_path: true
        include_file_name: false
        operators:
          # Find out which format is used by kubernetes
          - type: router
            id: get-format
            routes:
              - output: parser-docker
                expr: '$$body matches "^\\{"'
              - output: parser-crio
                expr: '$$body matches "^[^ Z]+ "'
              - output: parser-containerd
                expr: '$$body matches "^[^ Z]+Z"'
          # Parse CRI-O format
          - type: regex_parser
            id: parser-crio
            regex: '^(?P<time>[^ Z]+) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*) (?P<log>.*)$'
            output: extract_metadata_from_filepath
            timestamp:
              parse_from: time
              layout_type: gotime
              layout: '2006-01-02T15:04:05.000000000-07:00'
          # Parse CRI-Containerd format
          - type: regex_parser
            id: parser-containerd
            regex: '^(?P<time>[^ ^Z]+Z) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*) (?P<log>.*)$'
            output: extract_metadata_from_filepath
            timestamp:
              parse_from: time
              layout: '%Y-%m-%dT%H:%M:%S.%LZ'
          # Parse Docker format
          - type: json_parser
            id: parser-docker
            output: extract_metadata_from_filepath
            timestamp:
              parse_from: time
              layout: '%Y-%m-%dT%H:%M:%S.%LZ'
          # Extract metadata from file path
          - type: regex_parser
            id: extract_metadata_from_filepath
            regex: '^.*\/(?P<namespace>[^_]+)_(?P<pod_name>[^_]+)_(?P<uid>[a-f0-9\-]{36})\/(?P<container_name>[^\._]+)\/(?P<restart_count>\d+)\.log$'
            parse_from: $$attributes["file.path"]
          # Move out attributes to Attributes
          - type: metadata
            attributes:
              stream: 'EXPR($.stream)'
              k8s.container.name: 'EXPR($.container_name)'
              k8s.namespace.name: 'EXPR($.namespace)'
              k8s.pod.name: 'EXPR($.pod_name)'
              k8s.container.restart_count: 'EXPR($.restart_count)'
              k8s.pod.uid: 'EXPR($.uid)'
          # Clean up log body
          - type: restructure
            id: clean-up-log-body
            ops:
              - move:
                  from: log
                  to: $
    processors:
    exporters:
      logging:
      loki:
        endpoint: "http://loki.soapdemo.svc.cluster.local:3100/loki/api/v1/push"
        labels:
          attributes:
            container_name: ""
            source: ""
    service:
      pipelines:
        traces:
          receivers: [otlp]
          processors: []
          exporters: [logging]
        logs:
          receivers: [otlp, filelog]
          processors: []
          exporters: [logging, loki]
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: agent-config
data:
  agent.yaml: |
    receivers:
      otlp:
        protocols: 
          grpc:
    processors:
    exporters:
      otlp:
        endpoint: "opentelemetrycollector.soapdemo.svc.cluster.local:4317"
        insecure: true
    service:
      pipelines:
        traces:
          receivers: [otlp]
          processors: []
          exporters: [otlp]